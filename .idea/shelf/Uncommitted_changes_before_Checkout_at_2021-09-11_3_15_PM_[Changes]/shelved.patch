Index: src/main/java/fct/cs/Login/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fct.cs.Login;\r\n\r\n\r\n\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.spec.InvalidKeySpecException;\r\nimport java.sql.*;\r\nimport java.util.ResourceBundle;\r\n\r\nimport com.jfoenix.controls.JFXButton;\r\nimport fct.cs.dbUtil.DatabaseConnector;\r\nimport io.github.palexdev.materialfx.controls.MFXPasswordField;\r\nimport io.github.palexdev.materialfx.controls.MFXTextField;\r\nimport io.github.palexdev.materialfx.utils.BindingUtils;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.stage.Stage;\r\n\r\nimport javafx.scene.image.Image;\r\n\r\n/**\r\n *\r\n * @author hoxha\r\n */\r\npublic class LoginController implements Initializable {\r\n\r\n    public ImageView imgX;\r\n    @FXML\r\n    private Label label;\r\n\r\n    @FXML\r\n    private MFXTextField txtUsername;\r\n\r\n    @FXML\r\n    private JFXButton loginBtn;\r\n\r\n    @FXML\r\n    private Label errorLabel;\r\n\r\n    @FXML\r\n    private Label errorMsg;\r\n\r\n    @FXML\r\n    private MFXPasswordField txtPass;\r\n\r\n    @FXML\r\n    private Button forgotBtn;\r\n\r\n    @FXML\r\n    private Button exitBtn;\r\n\r\n    @FXML\r\n    private Hyperlink registerOnAction;\r\n\r\n    @FXML\r\n    private Hyperlink fgwPass;\r\n\r\n\r\n    private Connection conn;\r\n    private DatabaseConnector databaseConnector;\r\n    PreparedStatement pst;\r\n    ResultSet rs;\r\n\r\n    public void centerImage() {\r\n        Image img = imgX.getImage();\r\n        if (img != null) {\r\n            double w = 0;\r\n            double h = 0;\r\n\r\n            double ratioX = imgX.getFitWidth() / img.getWidth();\r\n            double ratioY = imgX.getFitHeight() / img.getHeight();\r\n\r\n            double reducCoeff = 0;\r\n            if(ratioX >= ratioY) {\r\n                reducCoeff = ratioY;\r\n            } else {\r\n                reducCoeff = ratioX;\r\n            }\r\n\r\n            w = img.getWidth() * reducCoeff;\r\n            h = img.getHeight() * reducCoeff;\r\n            System.out.println(\"yo\");\r\n            imgX.setX((imgX.getFitWidth() - w) / 2);\r\n            imgX.setY((imgX.getFitHeight() - h) / 2);\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        Image img1 = new Image(String.valueOf(getClass().getResource(\"/images/BookStore.png\")));\r\n        imgX.setImage(img1);\r\n        centerImage();\r\n    }\r\n\r\n\r\n    @FXML\r\n    void loginOnAction(ActionEvent event) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {\r\n\r\n\r\n        DatabaseConnector databaseConnector = new DatabaseConnector();\r\n        PasswordSecure decrypt = new PasswordSecure();\r\n\r\n        try {\r\n            this.conn = databaseConnector.getConn();\r\n\r\n            String username = txtUsername.getText().trim();\r\n            String password = txtPass.getText().trim();\r\n\r\n\r\n\r\n\r\n            if (username.isEmpty() || password.isEmpty()) {\r\n\r\n                txtUsername.setValidated(true);\r\n                txtUsername.getValidator().add(\r\n                        BindingUtils.toProperty(\r\n                                txtUsername.textProperty().length().isNotEqualTo(0)\r\n                        ),\r\n                        \"You need enter username\"\r\n                );\r\n\r\n                txtPass.setValidated(true);\r\n                txtPass.getValidator().add(\r\n                        BindingUtils.toProperty(\r\n                                txtPass.textProperty().length().isNotEqualTo(0)\r\n                        ),\r\n                        \"You need enter password\"\r\n                );\r\n\r\n                System.out.println(\"Empty field\");\r\n            }\r\n            else {\r\n                //sql query for getting username as telnum\r\n                PreparedStatement ps_1 = conn.prepareStatement(\"select * from login where telnum=?\");\r\n                //sql query for getting username as email\r\n                PreparedStatement ps_2 = conn.prepareStatement(\"select * from login where email=?\");\r\n\r\n                ps_1.setString(1, username);\r\n                ps_2.setString(1, username);\r\n\r\n                ResultSet rs_1 = ps_1.executeQuery();\r\n                ResultSet rs_2 = ps_2.executeQuery();\r\n\r\n                if(rs_1.next()){\r\n                    String storedPassword = rs_1.getString(\"password\");\r\n                    boolean matched = decrypt.validateString(password, storedPassword );\r\n                    System.out.println(matched);\r\n\r\n\r\n                }else if(rs_2.next()){\r\n                    String storedPassword = rs_2.getString(\"password\");\r\n                    boolean matched = decrypt.validateString(password, storedPassword );\r\n                    System.out.println(matched);\r\n\r\n                } else {\r\n                    System.out.println(\"Not Found\");\r\n//                    errorMsg.setText(\"Invalid credentials. Please try again\");\r\n                }\r\n            }\r\n        } catch (SQLException throwables) {\r\n//            System.out.println(\"error\" + ex.toString());\r\n            throwables.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    //Load register.fxml\r\n    @FXML\r\n    public void registerOnAction(ActionEvent event)throws IOException{\r\n        Parent view = FXMLLoader.load(getClass().getResource(\"/fct/cs/Register.fxml\"));\r\n        Scene scene = new Scene(view);\r\n        Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();\r\n        window.setScene(scene);\r\n        window.show();\r\n    }\r\n\r\n    @FXML\r\n    public void forgotOnAction(ActionEvent event)throws IOException{\r\n        Parent view = FXMLLoader.load(getClass().getResource(\"/fct/cs/ChangePassword.fxml\"));\r\n        Scene scene = new Scene(view);\r\n        Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();\r\n        window.setScene(scene);\r\n        window.show();\r\n    }\r\n\r\n    private void updateAlert(String user){\r\n\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(\"Login successfully.\");\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(user + \" has logged in\");\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private void errorAlert(String e){\r\n\r\n        Alert alert = new Alert(Alert.AlertType.ERROR);\r\n        alert.setTitle(\"Error!.\");\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(e);\r\n        alert.showAndWait();\r\n    }\r\n\r\n}
===================================================================
diff --git a/src/main/java/fct/cs/Login/LoginController.java b/src/main/java/fct/cs/Login/LoginController.java
--- a/src/main/java/fct/cs/Login/LoginController.java	
+++ b/src/main/java/fct/cs/Login/LoginController.java	
@@ -157,12 +157,22 @@
                     String storedPassword = rs_1.getString("password");
                     boolean matched = decrypt.validateString(password, storedPassword );
                     System.out.println(matched);
+                    Parent view = FXMLLoader.load(getClass().getResource("/fct/cs/main-dash.fxml"));
+                    Scene scene = new Scene(view);
+                    Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
+                    window.setScene(scene);
+                    window.show();
 
 
                 }else if(rs_2.next()){
                     String storedPassword = rs_2.getString("password");
                     boolean matched = decrypt.validateString(password, storedPassword );
                     System.out.println(matched);
+                    Parent view = FXMLLoader.load(getClass().getResource("/fct/cs/main-dash.fxml"));
+                    Scene scene = new Scene(view);
+                    Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
+                    window.setScene(scene);
+                    window.show();
 
                 } else {
                     System.out.println("Not Found");
@@ -188,7 +198,7 @@
 
     @FXML
     public void forgotOnAction(ActionEvent event)throws IOException{
-        Parent view = FXMLLoader.load(getClass().getResource("/fct/cs/ChangePassword.fxml"));
+        Parent view = FXMLLoader.load(getClass().getResource("/fct/cs/change-password.fxml"));
         Scene scene = new Scene(view);
         Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
         window.setScene(scene);
Index: src/main/java/fct/cs/Login/RegisterController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fct.cs.Login;\r\n\r\nimport com.jfoenix.controls.JFXButton;\r\n//import com.mysql.cj.conf.BooleanProperty;\r\nimport com.jfoenix.controls.JFXComboBox;\r\nimport fct.cs.dbUtil.DatabaseConnector;\r\nimport io.github.palexdev.materialfx.controls.*;\r\nimport io.github.palexdev.materialfx.utils.BindingUtils;\r\nimport io.github.palexdev.materialfx.utils.StringUtils;\r\nimport javafx.beans.binding.Bindings;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.fxml.FXML;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.spec.InvalidKeySpecException;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.util.ResourceBundle;\r\n\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.stage.Stage;\r\n\r\npublic class RegisterController implements Initializable {\r\n\r\n    public ImageView imgX;\r\n    ObservableList<String> questionBoxList = FXCollections.observableArrayList(\"What's your pet's name?\",\"What's your favorite food?\",\"Who was your childhood hero?\");\r\n\r\n\r\n    @FXML\r\n    private MFXTextField firstName;\r\n\r\n    @FXML\r\n    private MFXTextField lastName;\r\n\r\n    @FXML\r\n    private MFXTextField telNum;\r\n\r\n    @FXML\r\n    private MFXTextField emailAddress;\r\n\r\n    @FXML\r\n    private MFXPasswordField passwordGet;\r\n\r\n    @FXML\r\n    private MFXPasswordField passwordCheck;\r\n\r\n    @FXML\r\n    private JFXComboBox quesBox;\r\n\r\n    @FXML\r\n    private MFXTextField ansField;\r\n\r\n    @FXML\r\n    private MFXCheckbox checkBox;\r\n\r\n    @FXML\r\n    private Label errLabel;\r\n\r\n    @FXML\r\n    private JFXButton signBtn;\r\n\r\n    @FXML\r\n    private Hyperlink hyperlinkLogin;\r\n\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        javafx.scene.image.Image img1 = new Image(String.valueOf(getClass().getResource(\"/images/BookStore.png\")));\r\n        imgX.setImage(img1);\r\n\r\n        quesBox.setItems(questionBoxList);\r\n\r\n        ansField.setValidated(true);\r\n        ansField.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        ansField.textProperty().length().isNotEqualTo(0)\r\n                ),\r\n                \"You need enter the Answer\"\r\n        );\r\n\r\n        //check firstname validation\r\n        firstName.setValidated(true);\r\n        firstName.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        firstName.textProperty().length().isNotEqualTo(0)\r\n                ),\r\n                \"You need enter your first name\"\r\n        );\r\n\r\n        //check lastname validation\r\n        lastName.setValidated(true);\r\n        lastName.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        lastName.textProperty().length().isNotEqualTo(0)\r\n                ),\r\n                \"You need enter your last name\"\r\n        );\r\n\r\n        //check telnum validation\r\n        telNum.setValidated(true);\r\n        telNum.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        telNum.textProperty().length().isNotEqualTo(0)\r\n                ),\r\n                \"You need enter your Phone Number\"\r\n        );\r\n\r\n        //check email validation\r\n        emailAddress.setValidated(true);\r\n        emailAddress.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        emailAddress.textProperty().length().isNotEqualTo(0)\r\n                ),\r\n                \"You need enter your email address\"\r\n        );\r\n\r\n        //check passwaordget validation\r\n        passwordGet.setValidated(true);\r\n        passwordGet.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        passwordGet.passwordProperty().length().isNotEqualTo(0)\r\n                ),\r\n                \"You need enter your password\"\r\n        );\r\n\r\n        //check passwaordcheck validation\r\n        passwordCheck.setValidated(true);\r\n        passwordCheck.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        passwordCheck.passwordProperty().length().isNotEqualTo(0)\r\n                ),\r\n                \"You need enter your password Again\"\r\n        );\r\n\r\n        emailAddress.setValidated(true);\r\n        emailAddress.getValidator().add(BindingUtils.toProperty(\r\n                        Bindings.createBooleanBinding(\r\n                                () -> StringUtils.containsAll(emailAddress.getText(),\r\n                                        \"\",  \"@\", \".\"),\r\n                                emailAddress.textProperty()\r\n                        )\r\n                ),\r\n                \"You must enter valid Email Address\"\r\n        );\r\n\r\n        passwordGet.setValidated(true);\r\n        passwordGet.getValidator().add(\r\n                BindingUtils.toProperty(\r\n                        passwordGet.passwordProperty().length().greaterThanOrEqualTo(8)\r\n                ),\r\n                \"Must be at least 8 characters long\"\r\n        );\r\n        passwordGet.getValidator().add(BindingUtils.toProperty(\r\n                        Bindings.createBooleanBinding(\r\n                                () -> passwordGet.getPassword().matches(\".*\\\\d.*\"),\r\n                                passwordGet.passwordProperty()\r\n                        )\r\n                ),\r\n                \"Must contain at least one digit\"\r\n        );\r\n        passwordGet.getValidator().add(BindingUtils.toProperty(\r\n                        Bindings.createBooleanBinding(\r\n                                () -> StringUtils.containsAny(passwordGet.getPassword(),\r\n                                        \"\", \"?\", \"!\", \"@\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"-\", \"_\"),\r\n                                passwordGet.passwordProperty()\r\n                        )\r\n                ),\r\n                \"Must contain at least one among these: ?!@()[]{}-_\"\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n    private Connection conn;\r\n    //private DatabaseConnector databaseConnector;\r\n\r\n\r\n\r\n    @FXML\r\n    public void signOnAction(ActionEvent event) throws NoSuchAlgorithmException, InvalidKeySpecException {\r\n\r\n        DatabaseConnector databaseConnector = new DatabaseConnector();\r\n\r\n        try {\r\n            this.conn = databaseConnector.getConn();\r\n\r\n            String fName = firstName.getText().trim();\r\n            String lName = lastName.getText().trim();\r\n            String pNum = telNum.getText().trim();\r\n            String email = emailAddress.getText().trim();\r\n            String passGet = passwordGet.getText().trim();\r\n            String passCheck = passwordCheck.getText().trim();\r\n            String answer = ansField.getText().trim();\r\n            String question = quesBox.getValue().toString();\r\n\r\n\r\n            if (fName.isEmpty() && lName.isEmpty()) {\r\n                errLabel.setText(\"Please complete all the fills\");\r\n            } else if (fName.isEmpty() || lName.isEmpty() || pNum.isEmpty() || email.isEmpty() || passGet.isEmpty() || passCheck.isEmpty() || answer.isEmpty()) {\r\n                errLabel.setText(\"\");\r\n            }else if(passGet.length()<8) {\r\n                passwordGet.setValidated(true);\r\n                passwordGet.getValidator().add(\r\n                        BindingUtils.toProperty(\r\n                                passwordGet.passwordProperty().length().greaterThanOrEqualTo(8)\r\n                        ),\r\n                        \"Must be at least 8 characters long\"\r\n                );\r\n            }else if(passGet != passCheck){\r\n                passwordCheck.setValidated(true);\r\n                passwordCheck.getValidator().add(\r\n                        BindingUtils.toProperty(\r\n                                passwordCheck.passwordProperty().isEqualTo(passwordGet.getPassword())\r\n                        ),\r\n                        \"You need enter same password\"\r\n                );\r\n            }else {\r\n\r\n\r\n            PasswordSecure encrypt = new PasswordSecure();\r\n\r\n            //Encrypt password\r\n            String passwordEncrypt = encrypt.encryptString(passGet);\r\n            System.out.println(\"Password Encrypted\");\r\n\r\n            //Encrypt answer\r\n            String answerEncrypt = encrypt.encryptString(answer);\r\n            System.out.println(\"Answer Encrypted\");\r\n\r\n            //check phone number from database\r\n            PreparedStatement ps_1 = conn.prepareStatement(\"select * from login where telnum = ?\");\r\n            ps_1.setString(1, pNum);\r\n\r\n            //check email address from database\r\n            PreparedStatement ps_2 = conn.prepareStatement(\"select * from login where email = ?\");\r\n            ps_2.setString(1, email);\r\n\r\n            ResultSet rs_1 = ps_1.executeQuery();\r\n            ResultSet rs_2 = ps_2.executeQuery();\r\n\r\n            if (rs_1.next()) {\r\n                errLabel.setText(\"Phone number already taken, please enter another phone number\");\r\n            } else if (rs_2.next()) {\r\n                errLabel.setText(\"Email address already taken, please enter another email address\");\r\n            } else {\r\n\r\n\r\n                String sql = \"INSERT INTO login (fname, lname, telnum, email, password, ques, ans) values(?,?,?,?,?,?,?)\";\r\n                PreparedStatement ps_3 = conn.prepareStatement(sql);\r\n\r\n                ps_3.setString(1, fName);\r\n                ps_3.setString(2, lName);\r\n                ps_3.setString(3, pNum);\r\n                ps_3.setString(4, email);\r\n                ps_3.setString(5, passwordEncrypt);\r\n                ps_3.setString(6, question);\r\n                ps_3.setString(7, answerEncrypt);\r\n\r\n                ps_3.execute();\r\n\r\n                System.out.println(\"Account successfully registered\");\r\n            }\r\n            }\r\n\r\n        }catch(Exception ex){\r\n            System.out.println(\"error\" + ex.toString());\r\n        }\r\n\r\n    }\r\n\r\n    @FXML\r\n    public void hLoginOnAction(ActionEvent event)throws IOException{\r\n        Parent view = FXMLLoader.load(getClass().getResource(\"/fct/cs/login.fxml\"));\r\n        Scene scene = new Scene(view);\r\n        Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();\r\n        window.setScene(scene);\r\n        window.show();\r\n    }\r\n\r\n\r\n\r\n}
===================================================================
diff --git a/src/main/java/fct/cs/Login/RegisterController.java b/src/main/java/fct/cs/Login/RegisterController.java
--- a/src/main/java/fct/cs/Login/RegisterController.java	
+++ b/src/main/java/fct/cs/Login/RegisterController.java	
@@ -208,7 +208,7 @@
             String question = quesBox.getValue().toString();
 
 
-            if (fName.isEmpty() && lName.isEmpty()) {
+            /*if (fName.isEmpty() && lName.isEmpty()) {
                 errLabel.setText("Please complete all the fills");
             } else if (fName.isEmpty() || lName.isEmpty() || pNum.isEmpty() || email.isEmpty() || passGet.isEmpty() || passCheck.isEmpty() || answer.isEmpty()) {
                 errLabel.setText("");
@@ -228,7 +228,7 @@
                         ),
                         "You need enter same password"
                 );
-            }else {
+            }else {*/
 
 
             PasswordSecure encrypt = new PasswordSecure();
@@ -273,8 +273,14 @@
                 ps_3.execute();
 
                 System.out.println("Account successfully registered");
+
+                Parent view = FXMLLoader.load(getClass().getResource("/fct/cs/login.fxml"));
+                Scene scene = new Scene(view);
+                Stage window = (Stage)((Node)event.getSource()).getScene().getWindow();
+                window.setScene(scene);
+                window.show();
             }
-            }
+            //}
 
         }catch(Exception ex){
             System.out.println("error" + ex.toString());
